#######################
#CKA - 24th June 2023
#######################


Day - 1

	Introduction to VM/Containers/Kubernetes
	
	Lab Access :::
	
	AWS Free Tier Account to Practise Kubernetes
	
	
	Kubernetes is Container Orchestration Tool ::::
	
	Deployment :::
	
		- Install & run application
		- Deploy to qa/ and further testing 
		
	Testing ::::
	
	
	Development of Application ::::
	
	
	How the application is developed ? 
	What are the process/approaches involved ??
	
	- business needs -->
	
	
		Monolith Application Architecture
		
			Core Banking Application developed in legacy environments
			
			Continuous Delivey / Deployment
		
		Micro-Service Based Application Architecture
		
		E_Commerce 
		Online_Banking System == Web based. 
			Customer Registration				==> Code, Tested , Deployed to Prod.	==> *.war/*.jar - Deploy this as a service. - Containers 
			Customer Login						==> Code, Tested , Deployed to Prod.
			Customer Transaction Module			==> Code, Tested , Deployed to Prod.
		
	Container Orchestration Tool	
	
		Kubernetes is the Open Source Container Orchestration Tools 
		
		Docker Swarm -- Container Orchestration Tool
		
		AWS 		EKS
		AZURE 		AKS
		GCP 		GKS
		
		
	Container ????
	
	
		Application Build ???
		Dev Environment ::
		
			--> Build --> Is a process of compile the source code and create artifacts(Binaries - *.war/*.jar/*.exec/*.dll)
			
				cust_regis.war_SNAPSHOT_v1.0		- working as expected in UT.	--> Maven/		tomcat8.0/jdk1.8
				Unit Testing
			
			
		Non - Prod Environment																	Prod Environment

		Dev
			
		Test 
			QA				cust_regis.war_SNAPSHOT_v1.0	tomcat9.0/jdk1.6
			UAT 			cust_regis.war_SNAPSHOT_v1.0	tomcat8.5.0/openjdk17
		Pre-Prod/Staging							------>										Prod	cust_regis.war_SNAPSHOT_v1.0	tomcat8.5.0/openjdk17						
	
	
		Deployment :::		Process of copying the artifacts to Higher environments
		
		
		Dev ::: 
				cust_regis.war_SNAPSHOT_v1.0
				
				Package the application along with the depencies ::: (cust_regis.war_SNAPSHOT_v1.0 + tomcat8.0/jdk1.8)		-->	 Pkg1
				
				Application Image 	-->		Static file (cust_regis.war_SNAPSHOT_v1.0 + tomcat8.0/jdk1.8)
				Containers			-->		Executable of Images -- > 	 
				
	
		Targets ::::
			QA 			--> Pkg1
			UAT			--> pkg1
			Prod		--> pkg1
			
			
		Containers are Lightweight 	--> It is used to run application.
						
		Virtual Machine 			--> Computing Device ==> running in remote environments		
		
		Virutal Machines are used to run OS -> run the applications
		VM will be up and running and consumes the resource even if there is no application are running.
		
		
		Containers are used to reduce the no. of VMs.
		
		VMS are considered as Hardware Level Virtualization 
		Container are considered as OS Level Virtualization --> inherit the properties of base OS 
			Namespaces - CGroups
			
			
		Container Engine :::: meant Linux OS 
		
		Docker Desktop for Windows / Linux / Mac 
		
		Container Registry ==> download the base Img - ubuntu1.0 ==> ubuntu2.0
		
	
		Container Orchestration ::::
		
		
		Micro-Service Based Application Architecture
		
		E_Commerce 
		Online_Banking System == Web based. 
			Customer Registration				==> Code, Tested , Deployed to Prod.	==> *.war/*.jar - Deploy this as a service. - Containers 
			Customer Login						==> Code, Tested , Deployed to Prod.
			Customer Transaction Module			==> Code, Tested , Deployed to Prod.	
		
		3-tier architecture ::=---> Frontend, Application_Logic,Backend(DataBase)
		
		Customer Registration				==> Code, Tested , Deployed to Prod.	==> *.war/*.jar - 
		
											Deploy this as a service. - Containers
											Frontend - c1		
											Application_Logic - c2 ----> 
											Backend(DataBase) - c3
											
											
		Tools -- to monitor and ensure high availability of the application containers 
		Container Orchestration :::
		
		- Kubernetes Architecture
		- Kubernetes Concepts 
		- Volumes 
		- Services 
		- Networking 
	
	- Kubernetes Architecture :::
	
			Master / Worker Nodes 
			
			
		Kubernetes_Master		(VM)
			Kubernetes_Cluster
				Kubernetes_WorkerNode1		Pkg1
				Kubernetes_WorkerNode2		Pkg1
				Kubernetes_WorkerNode3		Pkg1
		
		
		Container Images are stored and Managed in Container Registry
		
		Docker ---> DockerHub 
		
		AWS --> ECS --> ECR --> EKS
		AZ 	--> ACS --> ACR --> AKS
		
		
		pod --> is a atomic unit of sheduling --> 
		

	Kubernetes_Master		(VM) (Passive)
		Kubernetes_Master		(VM) (Active)
		
			Kubernetes_Cluster (Active)
				Kubernetes_WorkerNode1		Pkg1
				Kubernetes_WorkerNode2		Pkg1
				Kubernetes_WorkerNode3		Pkg1
				
			Kubernetes_Cluster (Passive)
				Kubernetes_WorkerNode1		Pkg1
				Kubernetes_WorkerNode2		Pkg1
				Kubernetes_WorkerNode3		Pkg1
				
			Kubernetes_Master	
					Kubernetes_Master1		(VM) (Active)
					
						Kubernetes_Cluster (Active)
							Kubernetes_WorkerNode1		Pkg1
							Kubernetes_WorkerNode2		Pkg1
							Kubernetes_WorkerNode3		Pkg1
							
						Kubernetes_Cluster (Passive)
							Kubernetes_WorkerNode1		Pkg1
							Kubernetes_WorkerNode2		Pkg1
							Kubernetes_WorkerNode3		Pkg1
							

					Kubernetes_Master2		(VM) (Active)
					
						Kubernetes_Cluster (Active)
							Kubernetes_WorkerNode1		Pkg1
							Kubernetes_WorkerNode2		Pkg1
							Kubernetes_WorkerNode3		Pkg1
							
						Kubernetes_Cluster (Passive)
							Kubernetes_WorkerNode1		Pkg1
							Kubernetes_WorkerNode2		Pkg1
							Kubernetes_WorkerNode3		Pkg1
							
							
		Kubernetes Terminologies ::::
		
			Nodes			-- Master(Control Plane), Cluster(WorkerNodes1,2,3,4,5,.....)
			Images 			-- Is a static file composed of Application and its dependencies
			Containers		-- Instance of Image -- Executable unit of Image
			Pods 			-- Smallest/Atomic unit of Scheduling - Can have one or more containers -- one to one mapping as a best practise.
			Volumes			-- persistant volumes
			Services
			
		
		Computing Device :::			Docker ::::					Kubernetes ::::
		
		
		Virtual Machines				Container  					Pod (1 + 1)
										Docker Compose				Volumes are allocated at pod level
										Volumes are allocated
										
Next :
										
		Create Github 		--> 
		AWS Account 	  	--> 	Free Tier Account
		
		

########################
Day - 2 - 25th June 2023
########################

		Kubernetes Concepts 
		Installation and Configuration of Kubernetes
		

	Kubernetes Concepts :::
	
	
		kubectl
		pods
		Kubernetes Objects 
		Services 
		Volumes 
		HELM
		Troubleshooting 
		Security 
		
	
	Installation and Configuration of Kubernetes :::
	
	For Learning Purpose :
		- https://labs.play-with-docker.com/
		- https://labs.play-with-k8s.com/
		
		- Minikube ==> Learning purpose 
	
	Open-Source Kubernetes(Self-Managed Service)	
	
	Managed Services 	- Cloud Service Providers(AWS/AZ/GCP/DO)
	
	On-Premises ::::
	
		Create Virtual Machines ::::	
		
		Hypervisor 
		
		1. Oracle VirtualBox --> 
		2. Create VMs - 3 (1 + 2)
		3. Use Kubeadm 
		
	Open-Source Kubernetes(Self-Managed Service)	 --> Installation & Configuration :
			https://kubernetes.io/docs/setup/
	
		kubeadm ==> Used to Install and Config. Kubernetes
		kubectl ==> Used to work on Kubernetes

		Kubernetes_Master		(VM) (Active)
				Kubernetes_WorkerNode1		Pkg1
				Kubernetes_WorkerNode2		Pkg1
				
		
		
	VMs ===> Access this VM using using external SSH Client - putty/moboxterm/terminal - Keypair.
			 https://mobaxterm.mobatek.net/download.html
			 
			 
	Kubectl ::::

	Pods :::::
	
	Namespace :::::
	
	
	
	kubectl get nodes
	Namespaces are logical partition of cluster  - -default namespace
	kube-system
	
	


		Non-PROD					PROD 
		
		DEV						
		QA 			Testing 
		UAT 						Prod (VMs)
		Prod
		

		Kubernetes_Master
			cluster1
				Kubernetes_WorkerNode1		
				Kubernetes_WorkerNode2	
				
	Namespace === are logical partition of cluster  - default namespace
	
	kubectl create namespace QA
	
	kubectl create namespace QA
	Non-Prod ::
		Kubernetes_Master							
			cluster1						App_Team1,2,3,4
				Kubernetes_WorkerNode1		
				Kubernetes_WorkerNode2
				Kubernetes_WorkerNode3		
				Kubernetes_WorkerNode4
				Kubernetes_WorkerNode5		
				Kubernetes_WorkerNode6
				
	kubectl create namespace App_Team1


########################
Day - 3 - 1st July 2023
########################
	
		Concepts of Kubernetes ::::		
		
		Kubectl :::			
		
		Pods :::
		
		Controller Objects :::
			Replicasets 
			Replication Controllers 
			DaemonSets 
			Deployments 
		Volumes :::
			EmptyDir 
			Hostpath
			Config_Maps
			Secrets
			
		The kubernetes objects can be created using kubectl adhoc commands / using Manifest file.
		
		Manifest file ---> *.yaml file
		
		Container Registry ==> 
		
			Organization 			==> Add Users to this Org.
				Repositories 
					Create Images 
		
		Create Pod ::::
		
		
		docker exec ===> login to running containers 
		
		kubectl exec ==> login to runnig containers 
		
		
		Create an simple Nginx Pod Images

		Login to the running pod 
		
		create some file - html file 
		
		save the changes 
		
		Access the pod using web browser .
		
		Docker -- port Mapping / Binding 
		
		
		NodePort - is a service used to expose the pod to internet.
		
		Services :::
		
			ClusterIP
			NodePort 
			LoadBalancer		--> IP - DNS -->  
			
			
		Pod ==> 
		
		
		docker run -it -p 8087:80 nginx
		
		
		Master 
		
			Worknodes 
			
			
		
		
		
		VM ===> nginx appln ==> localhost:80
		
		VM --> Docker_Container ==> nginx appln ==> Public_Ip:8087 ===> to achieve -p 8087:80
		
		VM --> Pod (Docker_Container ==> nginx appln) ==> Public_Ip:31000 ===> to achieve -- NodePort Service - 80:31000
		
		
		How to create manifest for Pod definition
		
		How to expose a pod to internet
		
		
		2 WN 
		
		Create the replicas of pods and deploy it in all the nodes.
		
		Controller Manager ===> It is always used to run the pods in its desired state.
		
		my desired state is -- I want to run 3 instance(replicas) of pod at any point of time.
		
		Controller Objects :::
			Replicasets 
			***Replication Controllers 
			DaemonSets 
			Deployments 		
		
		
		Replicasets  (vs) Replication Controllers 
		
		Both are used to run a specific no. of pods at any point of time.
		
		RC ==> uses Equality Based Operator to refer the label
		RS ==> uses Set Based Operator to refer the labels
		
		
		Deploy a pod in Dev & QA env. 
		
		envi = dev 
		envi = qa 
		
		envi in (dev,QA)
		
		
		
# nginx-rc.yaml  
apiVersion: v1
kind: ReplicationController
metadata:
  name: nginx-rc
spec:
  replicas: 3
  template:
    metadata:
      name: nginx-pod
      labels:
        app: nginx-app
    spec:
      containers:
      - name: nginx-container
        image: nginx
        ports:
        - containerPort: 80		
  template:
    metadata:
      name: nginx-pod1
      labels:
        app: nginx-app1
    spec:
      containers:
      - name: nginx-container1
        image: nginx
        ports:
        - containerPort: 80
  selector:
    app: nginx-app
    app: nginx-app1
	
	

########################
Day - 4 - 2nd July 2023
########################


		Replication Controller 
		
		Replicasets 
		
		deployment ==> Process of releasing the new version of appln.
		
		Continuous Development/Integration in DevOps ===> 
		
		src code repo. (github/bitbucket/azRepo/)		==> source-code(*.java)

		artifactory Libraries/Repositories (Jfrog Artifatory) --> maintains artifacts(binaries-*.war,*.jar,*.dll,*.exec)
		
		Container Registry/Repositories (Dockerhub)
		
		*.war_v1.0 ==> deployed 
		*.war_v1.1 ==> deployed
		*.war_v1.2 ==> deployed
		
		bankingapp:9.0
		bankingapp:latest
		
		
		Deployment ==> controller Objects in Kubernetes written using will be used.
		
		This Monitors the Pods and it helps the pods to always run in its desired state.
		
		Deployment ==> controller Objects in Kubernetes are used to deploy stateless Applications.
		
		Replicasets
		Scale Up/Down
		deployment of new versions
		Undo/Rollback the changes
		
		deployment Strategies :::::
		
			Rolling Update/deployment Strategy			==> Default deployment strategy in kubernetes
			Ensure 100% availability.
			
		bankingapp:8.0			---> initial version 		--->  5 instance of pod --> 
		bankingapp:9.0			---> deployed 				--->  			

		bankingapp:latest
		
		
		Stateless Applications		(vs) 	Stateful Applications
		
		Statefulset ==> controller Objects in Kubernetes are used to deploy stateful Applications.
		
			Microservice :::
				Welcome_Page		==> Frontend		--> this kind of services doesnt generate any output/ 
		
			Microservice :::
				User_Login_Service ==>	Frontend/Application_Layer/Backend(DataBase) --> the containers has to maintain some data
				data - logs/reports/file/
			

			
		Manifest files::::
		
		git remote repos.
		
		DevOps_Admin_Org.
			DevOps_Admin_K8s_Repo
				Manifest.
				Visual Studio Code IDEs		--> Install YAML Extension.
					DevOps_K8s_Project
						*.yaml
			DevOps_Ansible_Repo
		
		
			
	cicd: 

		scm checkout --> 
		build 
		craete artifacts 
		
		build docker images		
		publish to container registry
		
		deploy to kubernetes 
		
		
		Jenkins --> CICD 			BUILD_NUMBER# 1
		
		scm checkout --> 
		build 
		craete artifacts 
		
		build docker images
				docker build -t loksaieta/mywebapp:${BUILD_NUMBER} .
				
		publish to container registry
		
		deploy to kubernetes 
		
		
	Daemonsets :::::: Is a controller Object used to execute a copy of Pod in all the available workernodes.
	
	Replicaset ???
				--> Ensure that a specific no. of pod instance are up and running all the time.  5 --> 5 nodes 
	
	
	
	
	Cluster::				
	
		WorkerNodes1
		WorkerNodes2
		WorkerNodes3
		WorkerNodes4
		WorkerNodes5
		
	DaemonSets ===> Monitoring tool ---> Execute this as pod
						- Infra-Structure Monitoring
						- Application Monitoring
						
						
	Stateless Application --> 
	Stateful Application  --> This require ==> Container Volume 
	
	
	Container 					<--> 		host Machine 
	(Container_Volume)			<==>		Host_Volume
	
	
	Kubernetes :::
	
		Volumes should be created at the Cluster. NOT at the host level. 
		
	Various Types: 
	
		emptyDir 
		hostpath
		ConfigMaps
		Secrets
		Persistant Volume
		Persistant Volume Claim 
		Distributed Storage medium/Servers
		
			AWS -- EBS / S3 
			AZ  -- AzDisks
			GCP -- GStorage
			On-Premises
			Hybrid 
		
				5TB --> Static/Dynamic 

	Config_Maps / Secrets ::::::
			
	Java Application :::
		Image --> (*.war,tomcat,jdk)	- appimgv1.0
		
		Environment Specific configurations are need to deploy the application.
		
		
		Image --> (*.war,tomcat,jdk,qa_config_file)		- qa_appimgv1.0
		Image --> (*.war,tomcat,jdk,uat_config_file)	- uat_appimgv1.0
		
		Image --> (*.war,tomcat,jdk)	- appimgv1.0			+ 	qa_config_file			== Deploy to QA Envi.
		Image --> (*.war,tomcat,jdk)	- appimgv1.0			+ 	uat_config_file			== Deploy to UAT Envi.
		
	Config_Maps / Secrets ::::::
	
	Secrets are used to maintain sensitive Data.				Database --> Credential / userId/password/token/keys
	ConfigMaps are usually used to maintain Non-Sensitive Data.
	
	
#nginx-pod-configmap-vol.yaml
apiVersion: v1
kind: Pod
metadata:
  name: nginx-pod-configmap-vol
spec:
  containers:
  - name: nginx-container
    image: nginx
    volumeMounts:
    - name: qa-vol
      mountPath: "/etc/non-sensitive-data"
      readOnly: true
  volumes:
    - name: qa-vol
      configMap:
        name: nginx-configmap-vol

########################
Day - 5 - 8th July 2023
########################	

		Volumes :::
		
			ConfigMaps
			Secrets
			hostpath
			PV 
				Static
				Dynamic
			PVC 
	
	
	
		Application ==> 						100GB of Volume.
			- Needs some input files
			- Creates some output files 
			
			
		pod1(/text-mnt) --> /test-vol
		
		
		pod1 -- 3 containers --> /test-vol
		
		emptyDir --> is the default volume.
		
		
		Storage Admins
		Infra-Architects
		Application Owners
		
		
		Process Workflow for volume Allocation.
		
		
		Developements --> 
		
		Prod deployment .
		
		Create a request --> Pod/Appln -- along with volumes requirement.
		Persistant Volume Claim --> Request Form.
		Persistant Volume --> will be provisioned to pod.
		
		
		Static Provisioning :::
		
			PV	-- Storage unit  
			
		Dynamic Provision :::
		
			PVC -- Persistant Volume Claim
			
			
		Services ::::
		
		Nodeport ::: --> Expose the pods to internet!
		
		
		
		The Properties of PODs
		
		pod ip address ==> Not a permanent one.
		
		External/Public/Static/Elastic IP Address will be used to access the applications thru internet.
			
			
			pod --> container1	--> Active Container 		80
					container2	--> Passive Container		80	sidecar conatainer()
					
		

########################
Day - 6 - 9th July 2023
########################	
		
		
		How to Troubleshoot the issues!
		Kubernetes Security - RBAC
			HELM - Package Manager for kubernetes.
				- Demo - Kubernetes Dashboard & Monitoring 
		Demo 	- deployments, CICD using Jenkins, PV & PVC 
				- Using Kubernetes Managed Services
		
		Any Questions on Installation & Config of Kubernetes ???
		
		NodeSelector --> Used to deploy the pods in the specific node using labels.
		
		Troubleshooting :::
		
			Kubernetes Objects --> Pods, RS,
				kubectl describe
			
	
	Kubernetes Master :::
	
		**kubernetes master1	(Active)/Passive	1 + 1	
			Cluster1
				WN1
				WN2
				WN3		
			Cluster2			(10 copies of pod up n running) 1...10 
				WN1
				WN2
				WN3						
		**kubernetes master2	(Active)/Passive		
			Cluster1
				WN1
				WN2
				WN3
			Cluster2
				WN1
				WN2
				WN3		
		
		100 types of applications ==> 
		
		3 Appln.
		
		Manifest --> 
		
		cluster1 :
		
			pod1		deployed in dev NS (dev)
			pod2		deployed in dev NS 
			pod3
			pod4 
			
		Role --> NS -- (dev) ==> Loksai 
		
		Cluster ==> Loksai
		
		
		HELM - Package Manager for kubernetes.
		
		
		
########################
Day - 7 - 15th July 2023
########################		
		
		HELM - Demo with Kubernetes Dashboard
		
				How to manage the Kubernetes Packages 
				How to use/Create Service Account 
				How to enable RBAC 
				How to perform Token Based Authention
				Converting ClusterIP to NodePort 
				Create Kubernetes Dashboard
				
				
		Services ==> 	NodePort 
						LoadBalancer - External Service 
						
						Ingress Controller 
						
		CI/CD 	 ==> 	Java Web Application - Maven Web Application 
						Jenkins_Master 
							Jenkins_Slave 
						Kubernetes
						
	Scenario1:
	
		www.mycompany.com/
			mail
			maps
			drive
	
		HostName Base Routing :::
		
			mail.mycompany.com
			maps.mycompany.com
			
	
						
	Scenario2:					
		mail.mycompany.com ==> DNS 
			indox
			sent
			trash
		
		Path based Routing :::
		
			mail.mycompany.com/inbox
			mail.mycompany.com/inbox
			
			
		Load Balancer		==> External IP of LoadBalancer --> applicable for whole application 
		
		NodePort Service  	==> Node Port					--> accessible thru the External IP of the specific WorkerNode1/Nodeport
		
		
		
		Namespace ::::: based Deployment :
		
		Taints ==> 
		Node Selector ==> 
		
		
		Config 
		Working kubernetes Obj 
		Service 
		Networking 
		Storage 
		
		Scheduling 
			Namespace 		Logical partitioning of Cluster. App. Team-DEV/TEST    -  Eniv. - QA/UAT 		
				--> deployment -->  --> Blue Green deployment ???
				
				Production Environment :::
				
					Active Prod Server ---> Appln. is LIVE 			Green Serv  ==> Passive 
					
					Passive Prod Server ---> Appln.  			Blue Serv		==> Convert this as Active = Green
					
			Namespace0 - Active ==> PROD Load - LIVE 		
			Namespace1 - Passive => 
					
					
					ingress-Namespace
				
			NodeSelector 
				Taints / Tolerations 
				
						Pre-requisites :::
							Label ==> Assign Lavel to the node 
						pod : 
							taint : label1
							toleration : label1
				
				
				cluster :::					Non-Prod Environment 
							wn1		-->	 Taint ---> Node Level 					
							wn2		-->
							wn3 	-->
							wn4		-->
							
							wn5
							wn6



				cluster :::					Prod Environment 
							wn1		-->	 Taint ---> Node Level 						
							wn2		-->
							wn3 	-->
							wn4		-->
							
							wn5
							wn6

							
		Montoring 
		
		


	Application Deployment using Kubernetes ::::
	
	1. Have to plan the infra-structure.
	2. Have to choose the required tools to be install.
	
	
	Deploy Java Maven/Springboot based Application in Kubernetes ???
	
	
	CICD ??
	
	What are the various Stages in CICD ???
	
	DEV 
	TEST 
	UAT
	PROD 
	
	Workflow of CI/CD is :
	
		Developers Creates the src_code & Commit the src_code in GITHUB Repository
	
	DevOps Tasks Starts :: CICD Pipeline:
	
		Identify the scr_code 
		Perform application Build 
		Create Artifacts 
		Build Docker Image
		Publish the Image to Dockerhub
		Deploy to Kubernetes 
			Manifest --> Define Deployments Oject with NodePort Service 
		
		
		Jenkins_Master 			VM 			--> Is to create jenkins cicd pipeline project & Schedule the builds
							git, jdk, jenkins 
//sudo apt install git -y

			Jenkins_Slave1 		VM 			--> Actual Build happens - Java Appln. 
							git, jdk, maven	--> (Create artifacts), docker - build docker image and publish to docker hub(Container Registry)
							
		Kubernetes_Master		
			Kubernetes_WorkerNode1
			Kubernetes_WorkerNode2
			Kubernetes_WorkerNode3
	
	
		Jenkins_Master 			VM 			--> Is to create jenkins cicd pipeline project & Schedule the builds	
			Jenkins_Slave 		VM 			--> Actual Build happens
		QA_Server 
		UAT_Server 
		PROD_Server1,2,3
		
		
	Jenkins CI/CD Pipeline :::
	
	SCM-Checkout -> perform Application build(Create artifacts) -> Docker Build(Create Docker Image) -> Publish to dockerhub -> Deploy to K8s.
	
						
########################
Day - 8 - 16th July 2023
########################		
		
		


	Application Deployment using Kubernetes ::::
	
	1. Have to plan the infra-structure.
	2. Have to choose the required tools to be install.
	
	
	Deploy Java Maven/Springboot based Application in Kubernetes ???
	
	
	CICD ??
	
	What are the various Stages in CICD ???
	
	DEV 
	TEST 
	UAT
	PROD 
	
	Workflow of CI/CD is :
	
		Developers Creates the src_code & Commit the src_code in GITHUB Repository
	
	DevOps Tasks Starts :: CICD Pipeline:
	
		Identify the scr_code 
		Perform application Build 
		Create Artifacts 
		Build Docker Image
		Publish the Image to Dockerhub
		Deploy to Kubernetes 
			Manifest --> Define Deployments Oject with NodePort Service 
		
		
		Jenkins_Master 			VM 			--> Is to create jenkins cicd pipeline project & Schedule the builds
							git, jdk, jenkins 
				//sudo apt install git -y

			Jenkins_Slave1 		VM 			--> Actual Build happens - Java Appln. 
							git, jdk, maven	--> (Create artifacts), docker - build docker image and publish to docker hub(Container Registry)
							Create User & User Access Keys.
								devopsadmin 
								sshkeys ==> 
									private & public 
									authorized_keys 
							
		Kubernetes_Master		
			Kubernetes_WorkerNode1
			Kubernetes_WorkerNode2
			Kubernetes_WorkerNode3
	
	
		Jenkins_Master 			VM 			--> Is to create jenkins cicd pipeline project & Schedule the builds	
			Jenkins_Slave 		VM 			--> Actual Build happens
		QA_Server 
		UAT_Server 
		PROD_Server1,2,3
		
dckr_pat_jYwJ6YtyM0Q830nzWZxcDXK9Ez8
	
	Jenkins CI/CD Pipeline :::
	
	SCM-Checkout -> perform Application build(Create artifacts) -> Docker Build(Create Docker Image) -> Publish to dockerhub -> Deploy to K8s.
	
	Dockerfile --> 

			Deployment ???
			
			Copying the artifacts from source server to any target server/Container 
			
			./target/loksaieta.war 			==> 			/usr/local/tomcat/webapps
	
	
		Jenkins_Master 			add inbound rule port 8080 
			Jenkins_Slave 


Password 
Token 
passwordless auth.


	key pair ==> public & private. 

ansible_Controller		ssh --> public of CM 

Ansible_Node1 - Dev 	
Ansible_Node1 - Test 






			
curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key | sudo tee \
  /usr/share/keyrings/jenkins-keyring.asc > /dev/null
echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update
sudo apt-get install jenkins


pipeline {
    agent { label 'slave1' }
	
    tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "slave_maven"
    }

	environment {	
		DOCKERHUB_CREDENTIALS=credentials('dockerloginid')
	}

    stages {
        stage('SCM Checkout') {
            steps {
                // Get some code from a GitHub repository
                git 'https://github.com/LoksaiETA/devops-java-webapp.git'
                //git 'https://github.com/LoksaiETA/Java-mvn-app2.git'
            }
		}
        stage('Maven Build') {
            steps {
                // Run Maven on a Unix agent.
                sh "mvn -Dmaven.test.failure.ignore=true clean package"
            }
		}
        stage("Docker build"){
            steps {
				sh 'docker version'
				sh "docker build -t loksaieta/loksai-eta-app:${BUILD_NUMBER} ."
				sh 'docker image list'
				sh "docker tag loksaieta/loksai-eta-app:${BUILD_NUMBER} loksaieta/loksai-eta-app:latest"
            }
        }
        stage('Approve - push Image to dockerhub'){
            steps{
                
                //----------------send an approval prompt-------------
                script {
                   env.APPROVED_DEPLOY = input message: 'User input required Choose "yes" | "Abort"'
                       }
                //-----------------end approval prompt------------
            }
        }
		stage('Login2DockerHub') {

			steps {
				sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
			}
		}
		stage('Push2DockerHub') {
			steps {
				sh "docker push loksaieta/loksai-eta-app:latest"
			}
		}
        stage('Deploy to Kubernetes Cluster') {
            steps {
		script {
			sshPublisher(publishers: [sshPublisherDesc(configName: 'Kubernetes', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: 'kubectl apply -f k8smvndeployment.yaml', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '*.yaml')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
			}
            }
	    }
    }
}


apiVersion: apps/v1
kind: Deployment
metadata:
  name: loksai-eta-deploy
  labels:
    app: loksai-eta-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: loksai-eta-app
  template:
    metadata:
      labels:
        app: loksai-eta-app
    spec:
      containers:
      - name: loksai-eta-container
        image: loksaieta/loksai-eta-app
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: loksai-eta-np-service
  labels:
    app: loksai-eta-app
spec:
  selector:
    app: loksai-eta-app

  type: NodePort
  ports:
  - nodePort: 31000
    port: 8080
    targetPort: 8080		
		
		
